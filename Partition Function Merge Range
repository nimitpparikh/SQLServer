DROP PROCEDURE IF EXISTS [dbo].[usp_PartitionMaintenance];
GO
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
ALTER PROCEDURE [dbo].[usp_PartitionMaintenance] @TableName               VARCHAR(128) = '', 
                                                  @CleanupXDaysOldData     INT          = 30, 
                                                  @Execute                 BIT          = 0, 
                                                  @NextPartitionAfterXDays INT          = 30, 
                                                  @PartitionALIGNEDIndex   BIT          = 0, 
                                                  @AllPartitionTablesInfo  BIT          = 0
AS
     SET @TableName = ISNULL(@TableName, '%');
     IF @TableName = ''
         SET @TableName = '%';
     DECLARE @BOUNDARYvalue SQL_VARIANT, @partition_number INT, @sql NVARCHAR(MAX), @fname VARCHAR(128), @sname VARCHAR(128), @rows BIGINT, @CurrentDate AS DATETIMEOFFSET= DATEADD(DD, DATEDIFF(day, '19000101', GETDATE()) + @NextPartitionAfterXDays, '19000101'), @boundary VARCHAR(MAX);
     DECLARE cpartition CURSOR
     FOR SELECT DISTINCT 
                t.name TName, 
                r.value PFRange, 
                f.name PFName, 
                S.name PSName, 
                rows RowsCount, 
                partition_number
         FROM sys.tables AS t
              INNER JOIN sys.indexes AS i ON t.object_id = i.object_id
              INNER JOIN sys.partitions AS p ON i.object_id = p.object_id
                                                AND i.index_id = p.index_id
              INNER JOIN sys.partition_schemes AS s ON i.data_space_id = s.data_space_id
              INNER JOIN sys.partition_functions AS f ON s.function_id = f.function_id
              LEFT OUTER JOIN sys.partition_range_values AS r ON f.function_id = r.function_id
                                                                 AND r.boundary_id = p.partition_number
         WHERE 1 = 1
               AND t.name LIKE @TableName
               AND i.type <= 1
               AND p.partition_number = 1
         -- AND r.value < DATEADD(DD, -@CleanupXDaysOldData, GETDATE())
         --AND rows = 0
         UNION
         SELECT DISTINCT 
                t.name TName, 
                r.value PFRange, 
                f.name PFName, 
                S.name PSName, 
                rows RowsCount, 
                partition_number
         FROM sys.tables AS t
              INNER JOIN sys.indexes AS i ON t.object_id = i.object_id
              INNER JOIN sys.partitions AS p ON i.object_id = p.object_id
                                                AND i.index_id = p.index_id
              INNER JOIN sys.partition_schemes AS s ON i.data_space_id = s.data_space_id
              INNER JOIN sys.partition_functions AS f ON s.function_id = f.function_id
              LEFT OUTER JOIN sys.partition_range_values AS r ON f.function_id = r.function_id
                                                                 AND r.boundary_id = p.partition_number
         WHERE 1 = 1
               AND t.name LIKE @TableName
               AND i.type <= 1
               --  AND p.partition_number = 1
               AND r.value < DATEADD(DD, -@CleanupXDaysOldData, GETDATE())
         --AND rows = 0
         ORDER BY partition_number;
     OPEN cpartition;
     FETCH NEXT FROM cpartition INTO @TableName, @BOUNDARYvalue, @fname, @sname, @rows, @partition_number;
     WHILE @@FETCH_STATUS = 0
         BEGIN
             BEGIN TRY
                 --select @BOUNDARYvalue , DATEADD(dd, -@CleanupXDaysOldData, GETDATE())
                 IF @BOUNDARYvalue < DATEADD(dd, -@CleanupXDaysOldData, GETDATE())
                     BEGIN
                         SET @sql = 'TRUNCATE TABLE ' + @TableName + '_switchout';
                         IF @Execute = 1
                             EXEC sp_executesql 
                                  @sql;
                             ELSE
                             PRINT @sql;
                         SET @sql = 'ALTER TABLE ' + QUOTENAME(@TableName) + ' SWITCH PARTITION ' + CONVERT(VARCHAR(6), @partition_number) + ' TO [' + @TableName + '_switchout];';
                         IF @Execute = 1
                             EXEC sp_executesql 
                                  @sql;
                             ELSE
                             PRINT @SQL;
                     END;
             END TRY
             BEGIN CATCH
                 PRINT 'Issue with switch ' + @sql;
             END CATCH;
             BEGIN TRY
                 IF(SQL_VARIANT_PROPERTY(@BOUNDARYvalue, 'basetype') = 'datetimeoffset')
                     SET @boundary = format(CAST(@BOUNDARYvalue AS DATETIMEOFFSET(7)), 'yyyy-MM-dd HH:mm:ss.fffffff zzz');
                     ELSE
                     SET @boundary = CONVERT(VARCHAR(23), @BOUNDARYvalue, 121);
                 SET @sql = 'ALTER PARTITION FUNCTION ' + @fname + ' () MERGE RANGE (''' + @boundary + ''') --' + @TableName;
                 IF @rows = 0
                    AND @BOUNDARYvalue < DATEADD(dd, -@CleanupXDaysOldData, GETDATE())
                     BEGIN
                         IF @Execute = 1
                             EXEC sp_executesql 
                                  @sql;
                             ELSE
                             PRINT @sql;
                     END;
             END TRY
             BEGIN CATCH
                 SELECT @TableName, 
                        @BOUNDARYvalue, 
                        @fname, 
                        @sname, 
                        @rows;
                 PRINT 'Merge Range Failed ' + @SQL;
             END CATCH;
             BEGIN TRY
                 SET @sql = 'ALTER PARTITION SCHEME ' + @sname + ' NEXT USED [PRIMARY]; --' + @TableName;
                 IF(@Execute = 1)
                     BEGIN
                         IF @partition_number = 1
                             EXEC sp_executesql 
                                  @sql;
                     END;
                     ELSE
                     IF @partition_number = 1
                         PRINT @SQL;
                 SET @sql = 'ALTER PARTITION FUNCTION ' + @fname + '() SPLIT RANGE (''' + CONVERT(VARCHAR(23), @CurrentDate, 121) + '''); --' + @TableName;
                 IF(@Execute = 1)
                     BEGIN
                         IF @partition_number = 1
                             EXEC sp_executesql 
                                  @sql;
                     END;
                     ELSE
                     IF @partition_number = 1
                         PRINT @SQL;
             END TRY
             BEGIN CATCH
                 PRINT 'Partition already there;';
             END CATCH;
             FETCH NEXT FROM cpartition INTO @TableName, @BOUNDARYvalue, @fname, @sname, @rows, @partition_number;
         END;
     CLOSE cpartition;
     DEALLOCATE cpartition;
     IF @AllPartitionTablesInfo = 1
         BEGIN
             SELECT DISTINCT 
                    t.name TName, 
                    f.name PFName, 
                    S.name PSName, 
                    r.value PSRange, 
                    SQL_VARIANT_PROPERTY(r.value, 'BaseType') AS 'Base Type', 
                    SQL_VARIANT_PROPERTY(r.value, 'Precision') AS 'Precision', 
                    SQL_VARIANT_PROPERTY(r.value, 'Scale') AS 'Scale', 
                    c.name PartitionColumn, 
                    rows RowsCount, 
                    p.partition_number, 
                    p.data_compression_desc
             FROM sys.tables AS t
                  INNER JOIN sys.indexes AS i ON t.object_id = i.object_id
                  INNER JOIN sys.partitions AS p ON i.object_id = p.object_id
                                                    AND i.index_id = p.index_id
                  INNER JOIN sys.partition_schemes AS s ON i.data_space_id = s.data_space_id
                  INNER JOIN sys.partition_functions AS f ON s.function_id = f.function_id
                  LEFT OUTER JOIN sys.partition_range_values AS r ON f.function_id = r.function_id
                                                                     AND r.boundary_id = p.partition_number
                  LEFT JOIN sys.index_columns AS ic ON ic.[object_id] = i.[object_id]
                                                       AND ic.index_id = i.index_id
                                                       AND ic.partition_ordinal >= 1
                  LEFT JOIN sys.columns AS c ON t.[object_id] = c.[object_id]
                                                AND ic.column_id = c.column_id
             WHERE 1 = 1
                   -- AND t.name = 'tbl_carrecorddata'
                   AND i.type <= 1
             --AND p.partition_number = 1
             --AND F.NAME NOT LIKE 'DateTimeOffsetRangePFN'
             --AND r.value < DATEADD(DD, -30, GETDATE())
             -- AND rows <> 0
             ORDER BY t.name, 
                      partition_number;
         END;

     -----------------------------------------------------------------------------------------------------------------------------------------------------------
     IF @PartitionALIGNEDIndex = 1
         BEGIN
			SELECT i.[name] AS IndexName
    ,SUM(s.[used_page_count]) * 8 AS IndexSizeKB into #temp
FROM sys.dm_db_partition_stats AS s
INNER JOIN sys.indexes AS i ON s.[object_id] = i.[object_id]
    AND s.[index_id] = i.[index_id]
GROUP BY i.[name]
ORDER BY i.[name]
             ;WITH CTE_PartCount
                  AS (SELECT P.object_id, 
                             P.index_id, 
                             COUNT(P.partition_number) AS PartitionCount
                      FROM sys.partitions AS P
                      GROUP BY P.object_id, 
                               P.index_id),
                  CTE_Objects
                  AS (SELECT O.object_id, 
                             O.name AS ObjectName, 
                             S.name AS SchemaName, 
                             I.index_id, 
                             I.name AS IndexName, 
                             I.type_desc AS IndexType
                      FROM sys.objects AS O
                           INNER JOIN sys.schemas AS S ON S.schema_id = O.schema_id
                           INNER JOIN sys.indexes AS I ON I.object_id = O.object_id
                      WHERE O.is_ms_shipped = 0
                            AND O.type_desc = 'USER_TABLE'),
                  CTE_Summary
                  AS (SELECT O.object_id, 
                             O.ObjectName, 
                             O.SchemaName, 
                             O.IndexName, 
                             O.IndexType, 
                             PC.PartitionCount, 
                             TablePartCount = FIRST_VALUE(PC.PartitionCount) OVER(PARTITION BY O.object_id
                             ORDER BY O.object_id, 
                                      O.index_id)
                      FROM CTE_Objects AS O
                           LEFT OUTER JOIN CTE_PartCount AS PC ON PC.object_id = O.object_id
                                                                  AND PC.index_id = O.index_id)
                  SELECT S.object_id, 
                         S.SchemaName, 
                         S.ObjectName, 
                         S.IndexName, 
						             T.IndexSizeKB,
                         S.IndexType, 
                         S.PartitionCount, 
                         IsPartitioned = CASE
                                             WHEN S.TablePartCount <> 1
                                             THEN 'YES'
                                             ELSE 'NO'
                                         END, 
                         IsAligned = CASE
                                         WHEN S.TablePartCount = S.PartitionCount
                                         THEN 'ALIGNED'
                                         ELSE ''
                                     END
                  FROM CTE_Summary AS S
				  inner join #temp t on s.IndexName = t.IndexName
                  WHERE S.TablePartCount <> 1
                  ORDER BY IsAligned;
         END;
GO
