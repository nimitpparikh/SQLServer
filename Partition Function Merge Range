DECLARE @tname VARCHAR(128)= 'tablename', @BOUNDARYvalue SQL_VARIANT, @sql NVARCHAR(MAX), @fname VARCHAR(128), @sname VARCHAR(128), @rows BIGINT, @CurrentDate AS DATETIMEOFFSET= DATEADD(dd, 30, SYSDATETIMEOFFSET());
DECLARE cpartition CURSOR
FOR SELECT t.name TName, 
           r.value PFRange, 
           f.name PFName, 
           S.name PSName, 
           rows RowsCount
    FROM sys.tables AS t
         INNER JOIN sys.indexes AS i ON t.object_id = i.object_id
         INNER JOIN sys.partitions AS p ON i.object_id = p.object_id
                                           AND i.index_id = p.index_id
         INNER JOIN sys.partition_schemes AS s ON i.data_space_id = s.data_space_id
         INNER JOIN sys.partition_functions AS f ON s.function_id = f.function_id
         LEFT OUTER JOIN sys.partition_range_values AS r ON f.function_id = r.function_id
                                                            AND r.boundary_id = p.partition_number
    WHERE 1 = 1
          --  AND t.name = @tname
          AND i.type <= 1
          AND p.partition_number = 2
    --AND rows = 0
    ORDER BY p.partition_number;
OPEN cpartition;
FETCH NEXT FROM cpartition INTO @tname, @BOUNDARYvalue, @fname, @sname, @rows;
WHILE @@FETCH_STATUS = 0
    BEGIN
        BEGIN TRY
            SET @sql = 'ALTER PARTITION FUNCTION ' + @fname + ' () MERGE RANGE (''' + CONVERT(VARCHAR(23), @BOUNDARYvalue, 121) + ''')';
            IF @rows = 0
                BEGIN
                    EXEC sp_executesql 
                         @sql;
                    PRINT @sql;
                END;
        END TRY
        BEGIN CATCH
            PRINT @SQL;
        END CATCH;
        BEGIN TRY
            SET @sql = 'ALTER PARTITION SCHEME ' + @sname + 'NEXT USED [PRIMARY];';
            --PRINT @sql;
            EXEC sp_executesql 
                 @sql;
            SET @sql = 'ALTER PARTITION FUNCTION ' + @fname + ' SPLIT RANGE (''' + CONVERT(VARCHAR(23), @CurrentDate, 121) + ''')';
            --PRINT @SQL;
            EXEC sp_executesql 
                 @sql;
        END TRY
        BEGIN CATCH
            PRINT 'Partition already there;';
        END CATCH;
        FETCH NEXT FROM cpartition INTO @tname, @BOUNDARYvalue, @fname, @sname, @rows;
    END;
CLOSE cpartition;  
DEALLOCATE cpartition;


/*

--Find Partition - Non Aligned Indexes 

SELECT
 ISNULL(db_name(s.database_id),db_name()) AS DBName
 ,OBJECT_SCHEMA_NAME(i.object_id,DB_ID()) AS SchemaName
 ,o.name AS [Object_Name]
 ,i.name AS Index_name
 ,i.Type_Desc AS Type_Desc
 ,ds.name AS DataSpaceName
 ,ds.type_desc AS DataSpaceTypeDesc
 ,s.user_seeks
 ,s.user_scans
 ,s.user_lookups
 ,s.user_updates
 ,s.last_user_seek
 ,s.last_user_update
FROM sys.objects AS o
JOIN sys.indexes AS i ON o.object_id = i.object_id
JOIN sys.data_spaces ds ON ds.data_space_id = i.data_space_id
LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s ON i.object_id = s.object_id AND i.index_id = s.index_id AND s.database_id = DB_ID()
WHERE o.type = 'u'
AND i.type IN (1, 2)
AND o.object_id in
(
 SELECT a.object_id from
 (SELECT ob.object_id, ds.type_desc from sys.objects ob 
 JOIN sys.indexes ind on ind.object_id = ob.object_id 
 JOIN sys.data_spaces ds on ds.data_space_id = ind.data_space_id
 GROUP BY ob.object_id, ds.type_desc ) a 
 GROUP BY a.object_id 
 HAVING COUNT (*) > 1
 )
ORDER BY [Object_Name] DESC;
GO
*/
