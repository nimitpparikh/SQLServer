USE tempdb;
GO
CREATE OR ALTER PROCEDURE spMoveDatabaseFiles
(@dbname      SYSNAME = 'tempdb', @newdrive VARCHAR(MAX) = 'D:\NewDataMountPoint\',@filename    VARCHAR(128)= '%')
--only provide new mountpoint name or drive letter, it will create script to move file to different location, folder structure needs to be same on new drive
as
SET NOCOUNT ON;
DECLARE @InstanceName NVARCHAR(128);
DECLARE @ServiceName NVARCHAR(128);

-- Get the instance name
SET @InstanceName = @@SERVICENAME;

-- Determine the service name based on the instance name
IF @InstanceName = 'MSSQLSERVER'
    SET @ServiceName = 'MSSQLSERVER';
ELSE
    SET @ServiceName = 'MSSQL$' + @InstanceName;

DECLARE @name        SYSNAME
      , @oldlocation VARCHAR(MAX)
      , @sizemb      BIGINT
      , @command     VARCHAR(MAX)
      , @newlocation    VARCHAR(1024)
      , @errorlog    VARCHAR(1024)
	  , @dirExists   INT
	  , @volumemountpoint varchar(max);
SET @errorlog = CONVERT(VARCHAR(1024), SERVERPROPERTY('ErrorLogFileName'));
SET @errorlog = LEFT(@errorlog, LEN(@errorlog) - 8);
DECLARE db_cursor CURSOR
FOR SELECT f.name AS [LogicalName], 
           f.physical_name AS [Location], 
           CEILING(f.size / 128.0) SizeMB,
		   s.volume_mount_point
    FROM sys.master_files f CROSS APPLY sys.dm_os_volume_stats(f.database_id, f.file_id) s
    WHERE f.database_id = DB_ID(@dbname)
          AND name LIKE @filename;
OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @name
                             , @oldlocation
                             , @sizemb, @volumemountpoint;
WHILE @@fetch_status = 0
    BEGIN
        SET @command = 'ALTER DATABASE ' + QUOTENAME(@dbname) + ' MODIFY FILE (NAME = ' + @name + ', FILENAME = ''' + @oldlocation + ''');';
        SET @command = '/* ROLLBACK ' + 'FileName ' + @name + ', CurrentLocation: ' + @oldlocation + ', Current Size: ' + CONVERT(VARCHAR(14), @sizemb) + 'MB' + CHAR(10) + @command + CHAR(10) + '*/';
        PRINT @command;
		
        SET @newlocation = REPLACE(@oldlocation,@volumemountpoint, @newdrive);

		PRINT 'IF (SELECT parent_directory_exists FROM sys.dm_os_file_exists(''' + LEFT(@newlocation, LEN(@newlocation) - CHARINDEX('\', REVERSE(@newlocation), 1) + 1) + 'dummyfile.txt'')) = 0
		BEGIN 
        EXEC xp_create_subdir ''' + LEFT(@newlocation, LEN(@newlocation) - CHARINDEX('\', REVERSE(@newlocation), 1) + 1) + ''';
		END'
		-- If the directory does not exist, create it
	    SET @command = '-- INSTALL ' + CHAR(10) + 'ALTER DATABASE ' + QUOTENAME(@dbname) + ' MODIFY FILE (NAME = ' + @name + ', FILENAME = ''' + @newlocation + ''');';
        PRINT @command;
        PRINT '/* ROBOCOPY ' + CHAR(10) + 'robocopy "' + LEFT(@oldlocation, LEN(@oldlocation) - CHARINDEX('\', REVERSE(@oldlocation), 1) + 1) + '" "' + LEFT(@newlocation, LEN(@newlocation) - CHARINDEX('\', REVERSE(@newlocation), 1) + 1) + '" ' + RIGHT(@oldlocation, CHARINDEX('\', REVERSE(@oldlocation)) - 1) + ' /S /r:3 /w:10 /log:"' + @errorlog + @name + '_robocopy_' + CONVERT(VARCHAR(8), GETDATE(), 112) + '.txt" /XF' + CHAR(10) + 'DEL  "' + @oldlocation + '"' + CHAR(10) + '*/';
		
        FETCH NEXT FROM db_cursor INTO @name
                                     , @oldlocation
                                     , @sizemb,@volumemountpoint;
    END;
CLOSE db_cursor;
DEALLOCATE db_cursor;
IF @dbname = 'tempdb'
	BEGIN    
		PRINT '/*' + char(10) + '--Restart SQL this will recreate file on new drive'
		-- Print the service name
		+ CHAR(10) + 'Restart from remote server'
		+ Char(10) + 'sc \\' + @@servername + ' stop "' + @ServiceName + '"'
		+ Char(10) + 'sc \\' + @@servername + ' start "' + @ServiceName + '"'
		+ char(10) + 'Restart from local server'
		+ Char(10) + 'net stop "' + @ServiceName + '"'
		+ Char(10) + 'net start "' + @ServiceName + '"' + CHAR(10) + '*/'
	END
    ELSE
    PRINT '/*' + CHAR(10) + ' ALTER DATABASE ' + @dbname + ' SET SINGLE_USER WITH ROLLBACK IMMEDIATE' + CHAR(10) + ' ALTER DATABASE ' + @dbname + ' SET MULTI_USER' + CHAR(10) + ' ALTER DATABASE ' + @dbname + ' SET OFFLINE' + CHAR(10) + '*/';
