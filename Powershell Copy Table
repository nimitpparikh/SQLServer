# Configuration parameters
$sourceServer = "sourceserver.domain.com"
$sourceDatabase = "test1"
$destinationServer = "Destnation.domain.com\instance" 
$destinationDatabase = "tempdb"
# Format: For different names use "SourceTable1:DestTable1", for same names just "Table1,Table2"
$tableMapping = "table1,table2:desttable2,table3,table4,table4:desttable"
$truncateIfExists = $true
$enableIdentityInsert = $true


function Copy-TableSchema {
    param (
        $sourceConn,
        $destConn,
        $sourceTableName,
        $destTableName
    )

    $tableExists = $false
    $command = $destConn.CreateCommand()
    $command.CommandText = "SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '$destTableName'"
    $reader = $command.ExecuteReader()
    if ($reader.Read()) {
        $tableExists = $true
    }
    $reader.Close()

    if ($tableExists) {
        if ($truncateIfExists) {
            $truncateCommand = $destConn.CreateCommand()
            $truncateCommand.CommandText = "TRUNCATE TABLE [$destTableName]"
            $truncateCommand.ExecuteNonQuery()
            Write-Host "Table $destTableName truncated."
        }
        return $true
    }

    $command = $sourceConn.CreateCommand()
    $command.CommandText = @"
    SELECT 
        c.name AS COLUMN_NAME,
        t.name AS DATA_TYPE,
        c.max_length AS CHARACTER_MAXIMUM_LENGTH,
        c.is_nullable AS IS_NULLABLE,
        c.is_identity AS IS_IDENTITY,
        c.is_computed AS IS_COMPUTED,
        CASE WHEN t.name = 'timestamp' THEN 1 ELSE 0 END AS IS_TIMESTAMP
    FROM sys.columns c
    JOIN sys.types t ON c.user_type_id = t.user_type_id
    WHERE OBJECT_NAME(c.object_id) = '$sourceTableName'
    ORDER BY c.column_id
"@
    $reader = $command.ExecuteReader()

    $createTableScript = @()
    $createTableScript += "USE [$destinationDatabase]"
    $createTableScript += "CREATE TABLE [$destTableName] ("

    while ($reader.Read()) {
        $columnName = $reader["COLUMN_NAME"]
        $dataType = $reader["DATA_TYPE"]
        $maxLength = $reader["CHARACTER_MAXIMUM_LENGTH"]
        $isNullable = $reader["IS_NULLABLE"]
        $isIdentity = $reader["IS_IDENTITY"]
        $isTimestamp = $reader["IS_TIMESTAMP"]

        if ($isTimestamp -eq 1) { continue }

        $columnDefinition = "[$columnName] $dataType"
        if ($maxLength -ne -1 -and $maxLength -ne [DBNull]::Value -and $dataType -notin @('int', 'bigint', 'smallint', 'tinyint', 'bit', 'decimal', 'numeric', 'money', 'smallmoney', 'float', 'real')) {
            $columnDefinition += "($maxLength)"
        }
        if ($isIdentity -eq 1) {
            $columnDefinition += " IDENTITY(1,1)"
        }
        if ($isNullable -eq 0) {
            $columnDefinition += " NOT NULL"
        }
        $createTableScript += $columnDefinition + ","
    }
    $reader.Close()

    $createTableScript[-1] = $createTableScript[-1].TrimEnd(',')
    $createTableScript += ")"

    $command = $destConn.CreateCommand()
    $command.CommandText = $createTableScript -join "`r`n"
    $command.ExecuteNonQuery()
    Write-Host "Table $destTableName created."
    return $true
}

function Copy-TableData {
    param (
        $sourceConn,
        $destConn,
        $sourceTableName,
        $destTableName
    )

    $columnCommand = $sourceConn.CreateCommand()
    $columnCommand.CommandText = @"
    SELECT 
        c.name,
        c.is_identity
    FROM sys.columns c
    JOIN sys.types t ON c.user_type_id = t.user_type_id
    WHERE OBJECT_NAME(c.object_id) = '$sourceTableName'
    AND t.name != 'timestamp'
    ORDER BY c.column_id
"@

    $columnReader = $columnCommand.ExecuteReader()
    $columns = @()
    $hasIdentity = $false
    while ($columnReader.Read()) {
        $columns += $columnReader["name"]
        if ($columnReader["is_identity"] -eq 1) {
            $hasIdentity = $true
        }
    }
    $columnReader.Close()

    $columnList = ($columns | ForEach-Object { "[$_]" }) -join ', '

    if ($hasIdentity -and $enableIdentityInsert -and $lastIdentityTable -ne $null) {
        $identityOffCommand = $destConn.CreateCommand()
        $identityOffCommand.CommandText = "SET IDENTITY_INSERT [$lastIdentityTable] OFF"
        $identityOffCommand.ExecuteNonQuery()
        Write-Host "Identity insert disabled for table $lastIdentityTable"
        $script:lastIdentityTable = $null
    }

    if ($hasIdentity -and $enableIdentityInsert) {
        $identityCommand = $destConn.CreateCommand()
        $identityCommand.CommandText = "SET IDENTITY_INSERT [$destTableName] ON"
        $identityCommand.ExecuteNonQuery()
        Write-Host "Identity insert enabled for table $destTableName"
        $script:lastIdentityTable = $destTableName
    }

    $rowCount = 0
    if ($hasIdentity -and $enableIdentityInsert -and $sourceTableName -ne $destTableName) {
        $sourceCommand = $sourceConn.CreateCommand()
        $sourceCommand.CommandText = "SELECT $columnList FROM [$sourceTableName]"
        $reader = $sourceCommand.ExecuteReader()

        try {
            while ($reader.Read()) {
                $values = @()
                foreach ($column in $columns) {
                    $value = if ($reader[$column] -is [DBNull]) { "NULL" } 
                            elseif ($reader[$column] -is [string]) { "'$($reader[$column].Replace("'", "''"))'" }
                            else { $reader[$column] }
                    $values += $value
                }
                
                $insertCommand = $destConn.CreateCommand()
                $insertCommand.CommandText = "INSERT INTO [$destTableName] ($columnList) VALUES ($($values -join ','))"
                $insertCommand.ExecuteNonQuery()
                $rowCount++
            }
        }
        finally {
            $reader.Close()
        }
    }
    else {
        try {
            $bulkCopy = New-Object Data.SqlClient.SqlBulkCopy($destConn, [System.Data.SqlClient.SqlBulkCopyOptions]::KeepIdentity, $null)
            $bulkCopy.DestinationTableName = "[$destTableName]"
            
            foreach ($column in $columns) {
                $bulkCopy.ColumnMappings.Add($column, $column) | Out-Null
            }
            
            $sourceCommand = $sourceConn.CreateCommand()
            $sourceCommand.CommandText = "SELECT $columnList FROM [$sourceTableName]"
            $sourceAdapter = New-Object Data.SqlClient.SqlDataAdapter($sourceCommand)
            $sourceDataSet = New-Object Data.DataSet
            $sourceAdapter.Fill($sourceDataSet)
            
            $rowCount = $sourceDataSet.Tables[0].Rows.Count
            $bulkCopy.WriteToServer($sourceDataSet.Tables[0])
            $bulkCopy.Close()
        }
        catch {
            Write-Host "Error during copy: $_"
            return 0
        }
    }

    Write-Host "Copied $rowCount rows"
    return $rowCount
}
}

# Main execution
$sourceConnectionString = "Server=$sourceServer;Database=$sourceDatabase;Integrated Security=True"
$destinationConnectionString = "Server=$destinationServer;Database=$destinationDatabase;Integrated Security=True"

$sourceConnection = New-Object System.Data.SqlClient.SqlConnection
$sourceConnection.ConnectionString = $sourceConnectionString
$sourceConnection.Open()

$destinationConnection = New-Object System.Data.SqlClient.SqlConnection
$destinationConnection.ConnectionString = $destinationConnectionString
$destinationConnection.Open()

foreach ($mapping in $tableMapping.Split(',').Trim()) {
    $sourceTable = $mapping
    $destTable = $mapping
    
    if ($mapping.Contains(':')) {
        $tables = $mapping.Split(':').Trim()
        $sourceTable = $tables[0]
        $destTable = $tables[1]
    }
    
    # Process copy and return single row count
    Write-Host "`nProcessing mapping: $sourceTable -> $destTable"
    
    if (Copy-TableSchema -sourceConn $sourceConnection -destConn $destinationConnection -sourceTableName $sourceTable -destTableName $destTable) {
        $rowCount = Copy-TableData -sourceConn $sourceConnection -destConn $destinationConnection -sourceTableName $sourceTable -destTableName $destTable
        if ($rowCount -gt 0) {
            Write-Host "Copied $rowCount rows successfully"
        }
    }
}

if ($lastIdentityTable -ne $null) {
    $identityOffCommand = $destinationConnection.CreateCommand()
    $identityOffCommand.CommandText = "SET IDENTITY_INSERT [$lastIdentityTable] OFF"
    $identityOffCommand.ExecuteNonQuery()
    Write-Host "Identity insert disabled for table $lastIdentityTable"
}

$sourceConnection.Close()
$destinationConnection.Close()

Write-Host "`nTable copy process completed."
