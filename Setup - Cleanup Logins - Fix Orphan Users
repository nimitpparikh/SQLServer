USE tempdb
GO
CREATE OR ALTER PROCEDURE dbo.usp_CleanupInvalidUsers
    @TargetAdminLogin SYSNAME = NULL,  -- Optional parameter for target admin login
    @PrintOnly BIT = 1             -- 1 for print only mode, 0 for execute and print
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        DECLARE @name SYSNAME;
        DECLARE @SQL NVARCHAR(MAX);
        DECLARE @ErrorMsg NVARCHAR(4000);
        DECLARE @AdminLoginName SYSNAME;
        DECLARE @AdminIsSysadmin BIT;
        DECLARE @Message NVARCHAR(MAX);
        
        -- Create temp procedure for handling execution/printing
        IF OBJECT_ID('tempdb..#ExecuteOrPrint') IS NOT NULL
            DROP PROCEDURE #ExecuteOrPrint;
            
        DECLARE @ExecOrPrintSQL nvarchar(MAX);
        SET @ExecOrPrintSQL = '
        CREATE PROCEDURE #ExecuteOrPrint
            @SQL NVARCHAR(MAX),
            @Message NVARCHAR(MAX)
        AS
        BEGIN
            SET NOCOUNT ON;
            PRINT ''--'' + @Message;
            PRINT @SQL + '';'';
            IF ' + CASE WHEN @PrintOnly = 0 THEN '1' ELSE '0' END + ' = 1
                EXEC sp_executesql @SQL;
        END';
        
        EXEC sp_executesql @ExecOrPrintSQL;
        
        -- Determine and validate the admin login
        IF @TargetAdminLogin IS NULL
        BEGIN
            SELECT @AdminLoginName = name,
                   @AdminIsSysadmin = IS_SRVROLEMEMBER('sysadmin', name)
            FROM sys.server_principals
            WHERE sid = 0x01;
            
            IF @AdminLoginName IS NULL
            BEGIN
                RAISERROR('No target admin login specified and SA account (SID 0x01) not found.', 16, 1);
                RETURN -1;
            END;
        END
        ELSE
        BEGIN
            SELECT @AdminLoginName = name,
                   @AdminIsSysadmin = IS_SRVROLEMEMBER('sysadmin', name)
            FROM sys.server_principals
            WHERE name = @TargetAdminLogin
            AND type IN ('S', 'U', 'G');

            IF @AdminLoginName IS NULL
            BEGIN
                RAISERROR('Specified admin login does not exist or is not valid.', 16, 1);
                RETURN -1;
            END;
        END;

        IF @AdminIsSysadmin IS NULL OR @AdminIsSysadmin = 0
        BEGIN
            RAISERROR('Login %s does not have sysadmin privileges.', 16, 1, @AdminLoginName);
            RETURN -1;
        END;

        PRINT '--Using admin account: ' + @AdminLoginName;
        PRINT CASE @PrintOnly 
                WHEN 1 THEN '--PRINT ONLY MODE: Commands will be displayed but not executed'
                ELSE '--EXECUTE MODE: Commands will be executed and displayed'
              END;

        -- Create temporary table for invalid logins
        IF OBJECT_ID('tempdb..#tblValidateLogins') IS NOT NULL
            DROP TABLE #tblValidateLogins;

        CREATE TABLE #tblValidateLogins
        (
            [SID]  [VARBINARY](85) NULL,
            [name] [SYSNAME] NOT NULL
        );

        INSERT INTO #tblValidateLogins
        EXEC sp_validatelogins;

        -- Handle Server Level Objects
        
        -- 1. Server Endpoints
        DECLARE endpoint_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT name FROM sys.endpoints 
            WHERE principal_id IN (SELECT principal_id FROM sys.server_principals WHERE sid IN (SELECT sid FROM #tblValidateLogins));
        
        OPEN endpoint_cursor;
        FETCH NEXT FROM endpoint_cursor INTO @name;
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            IF EXISTS (
                SELECT 1 
                FROM sys.server_principals 
                WHERE name = @AdminLoginName 
                AND (sid = 0x01 OR type IN ('U', 'G'))
            )
            BEGIN
                SET @SQL = N'ALTER AUTHORIZATION ON ENDPOINT::[' + @name + '] TO ' + QUOTENAME(@AdminLoginName);
                SET @Message = 'Changing endpoint ownership for: ' + @name + ' to ' + @AdminLoginName;
            END
            ELSE
            BEGIN
                SET @SQL = N'ALTER AUTHORIZATION ON ENDPOINT::[' + @name + '] TO ' + QUOTENAME(@AdminLoginName);
                SET @Message = 'Changing endpoint ownership for: ' + @name + ' to ' + @AdminLoginName;
            END;
            
            EXEC #ExecuteOrPrint @SQL, @Message;
            FETCH NEXT FROM endpoint_cursor INTO @name;
        END;
        
        CLOSE endpoint_cursor;
        DEALLOCATE endpoint_cursor;

        -- 2. Server Roles
        DECLARE role_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT name FROM sys.server_principals 
            WHERE type = 'R' 
            AND is_fixed_role = 0
            AND owning_principal_id IN (SELECT principal_id FROM sys.server_principals WHERE sid IN (SELECT sid FROM #tblValidateLogins));
        
        OPEN role_cursor;
        FETCH NEXT FROM role_cursor INTO @name;
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = N'ALTER AUTHORIZATION ON SERVER ROLE::[' + @name + '] TO ' + QUOTENAME(@AdminLoginName);
            SET @Message = 'Changing server role ownership for: ' + @name + ' to ' + @AdminLoginName;
            EXEC #ExecuteOrPrint @SQL, @Message;
            FETCH NEXT FROM role_cursor INTO @name;
        END;
        
        CLOSE role_cursor;
        DEALLOCATE role_cursor;

        -- 3. Database ownership
        DECLARE db_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT name FROM sys.databases
            WHERE owner_sid IN (SELECT sid FROM #tblValidateLogins) and is_read_only = 0 and user_access = 0 and state = 0
        
        OPEN db_cursor;
        FETCH NEXT FROM db_cursor INTO @name;
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = N'ALTER AUTHORIZATION ON DATABASE::[' + @name + '] TO ' + QUOTENAME(@AdminLoginName);
            SET @Message = 'Changing database ownership for: ' + @name + ' to ' + @AdminLoginName;
            EXEC #ExecuteOrPrint @SQL, @Message;
            FETCH NEXT FROM db_cursor INTO @name;
        END;
        
        CLOSE db_cursor;
        DEALLOCATE db_cursor;

        -- 4. SQL Agent Jobs
        DECLARE job_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT name FROM msdb..sysjobs
            WHERE owner_sid IN (SELECT sid FROM #tblValidateLogins);
        
        OPEN job_cursor;
        FETCH NEXT FROM job_cursor INTO @name;
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @SQL = N'EXEC msdb.dbo.sp_update_job @job_name=N''' + REPLACE(@name, '''', '''''') + 
                      ''', @owner_login_name=N''' + @AdminLoginName + '''';
            SET @Message = 'Changing job ownership for: ' + @name + ' to ' + @AdminLoginName;
            EXEC #ExecuteOrPrint @SQL, @Message;
            FETCH NEXT FROM job_cursor INTO @name;
        END;
        
        CLOSE job_cursor;
        DEALLOCATE job_cursor;

        -- 5. User cleanup
        DECLARE login_cursor CURSOR LOCAL FAST_FORWARD FOR
            SELECT name FROM #tblValidateLogins
            WHERE sid <> 0x01
            AND name <> @AdminLoginName;
        
        OPEN login_cursor;
        FETCH NEXT FROM login_cursor INTO @name;
        
        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- Drop database users
            SET @SQL = N'EXEC sp_MSforeachdb ''USE [?]; 

			              IF EXISTS (
                    SELECT 1 FROM sys.databases 
                    WHERE name = DB_NAME() 
                    AND state_desc = ''''ONLINE''''
                    AND is_read_only = 0
                )
                BEGIN
				IF EXISTS (select * from sys.schemas WHERE name =  N''''' + REPLACE(@name, '''', '''''') + ''''')
				BEGIN
					DROP SCHEMA  ' + QUOTENAME(@name) + ';
				END

                IF EXISTS (SELECT * FROM sys.database_principals 
                          WHERE name = N''''' + REPLACE(@name, '''', '''''') + ''''' 
                          AND type IN (''''S'''', ''''U'''', ''''G''''))
                BEGIN 
                    DROP USER ' + QUOTENAME(@name) + ';
                    PRINT ''''Dropped user ' + REPLACE(@name, '''', '''''') + ' from database [?]''''
                END
				
				END''';
            SET @Message = 'Dropping user ' + @name + ' from all databases';
            EXEC #ExecuteOrPrint @SQL, @Message;

            -- Drop login
            SET @SQL = N'DROP LOGIN ' + QUOTENAME(@name);
            SET @Message = 'Dropping login: ' + @name;
            EXEC #ExecuteOrPrint @SQL, @Message;
            
            FETCH NEXT FROM login_cursor INTO @name;
        END;
        
        CLOSE login_cursor;
        DEALLOCATE login_cursor;

    END TRY
    BEGIN CATCH
        SET @ErrorMsg = ERROR_MESSAGE();
        RAISERROR ('Error in usp_CleanupInvalidUsers procedure: %s', 16, 1, @ErrorMsg);
        RETURN -1;
    END CATCH
    
    -- Cleanup
    IF OBJECT_ID('tempdb..#tblValidateLogins') IS NOT NULL
        DROP TABLE #tblValidateLogins;
        
    RETURN 0;
END;
GO
usp_CleanupInvalidUsers
