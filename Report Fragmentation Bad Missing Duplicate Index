USE tempdb;
GO

CREATE OR ALTER PROCEDURE usp_IndexAnalysis
(
    @DatabaseName NVARCHAR(128) = 'test', -- Specify the database name
    @BADIndex BIT = 1,    
    @IndexUsage BIT = 1 ,-- Set to 1 to include analysis of bad non-clustered indexes
    @MissingIndex BIT = 0,    -- Set to 1 to include analysis of missing indexes
    @IndexFragmentation BIT = 0,  -- This will take a lot of time if DB is big with indexes
    @PageCount INT = 2500,
    @findDuplicateIndex BIT = 1  -- Set to 1 to include analysis of duplicate indexes
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sql NVARCHAR(MAX);
    DECLARE @dbExists BIT;

    -- Check if the specified database exists
    SELECT @dbExists = 1 FROM sys.databases WHERE name = @DatabaseName;

    IF @dbExists IS NULL
    BEGIN
        RAISERROR('Database %s does not exist.', 10, 1, @DatabaseName);
        RETURN;
    END

	IF @IndexUsage = 1
	BEGIN
        SELECT 'Index Usage Report' AS ReportName;
        SET @sql = N'USE ' + QUOTENAME(@DatabaseName) + '; 
		SELECT ''' + @DatabaseName + ''' AS DBName, 

			OBJECT_NAME(i.[object_id]) AS [ObjectName], 
			i.[name] AS [IndexName], 
			i.index_id, 
			s.user_seeks, 
			s.user_scans, 
			s.user_lookups,
			s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads], 
			s.user_updates AS [Writes],  
			i.[type_desc] AS [Index Type], 
			i.fill_factor AS [Fill Factor], 
			i.has_filter, 
			i.filter_definition, 
			s.last_user_scan, 
			s.last_user_lookup, 
			s.last_user_seek,
			FORMAT(CAST(8.0 * SUM(ps.used_page_count) / 1024 AS DECIMAL(10, 2)), ''N0'') + ''MB'' AS [IndexSizeMB]
		FROM 
			sys.indexes AS i WITH (NOLOCK)
		LEFT OUTER JOIN 
			sys.dm_db_index_usage_stats AS s WITH (NOLOCK) ON i.[object_id] = s.[object_id]
			AND i.index_id = s.index_id
			AND s.database_id = DB_ID()
		LEFT OUTER JOIN 
			sys.dm_db_partition_stats AS ps ON i.[object_id] = ps.[object_id] 
			AND i.index_id = ps.index_id
		WHERE 
			OBJECTPROPERTY(i.[object_id],''IsUserTable'') = 1
		GROUP BY 
			OBJECT_NAME(i.[object_id]), 
			i.[name], 
			i.index_id, 
			s.user_seeks, 
			s.user_scans, 
			s.user_lookups,
			s.user_updates,  
			i.[type_desc], 
			i.fill_factor, 
			i.has_filter, 
			i.filter_definition, 
			s.last_user_scan, 
			s.last_user_lookup, 
			s.last_user_seek
		ORDER BY 
			s.user_seeks + s.user_scans + s.user_lookups DESC 
		OPTION (RECOMPILE); -- Order by reads
		';
        EXEC sp_executesql @sql, N'@DatabaseName NVARCHAR(128)', @DatabaseName;
	END

	    IF @BADIndex = 1
    BEGIN
        SELECT 'Bad Index Report' AS ReportName;
        SET @sql = N'USE ' + QUOTENAME(@DatabaseName) + ';
        SELECT ''' + @DatabaseName + ''' AS DBName, 
               SCHEMA_NAME(o.[schema_id]) AS [Schema Name], 
               OBJECT_NAME(s.[object_id]) AS [Table Name],
               i.name AS [Index Name], 
               i.index_id, 
               i.is_disabled, 
               i.is_hypothetical, 
               i.has_filter, 
               i.fill_factor,
               s.user_updates AS [Total Writes], 
               s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads],
               s.user_updates - (s.user_seeks + s.user_scans + s.user_lookups) AS [Difference],
			(FORMAT(8 * SUM(ps.used_page_count) / 1024, ''N0'') + '' MB'') AS [IndexSizeMB]
		FROM sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
        INNER JOIN sys.indexes AS i WITH (NOLOCK) ON s.[object_id] = i.[object_id] AND i.index_id = s.index_id
        INNER JOIN sys.objects AS o WITH (NOLOCK) ON i.[object_id] = o.[object_id]
        LEFT JOIN sys.dm_db_partition_stats AS ps ON i.object_id = ps.object_id AND i.index_id = ps.index_id
        WHERE OBJECTPROPERTY(s.[object_id], ''IsUserTable'') = 1
        AND s.database_id = DB_ID(@DatabaseName)
        AND s.user_updates > (s.user_seeks + s.user_scans + s.user_lookups)
        AND i.index_id > 1 
        AND i.[type_desc] = N''NONCLUSTERED''
        AND i.is_primary_key = 0 
        AND i.is_unique_constraint = 0 
        AND i.is_unique = 0
        GROUP BY SCHEMA_NAME(o.[schema_id]), OBJECT_NAME(s.[object_id]), i.name, i.index_id, i.is_disabled, i.is_hypothetical, i.has_filter, i.fill_factor, s.user_updates, s.user_seeks, s.user_scans, s.user_lookups
        ORDER BY [Difference] DESC, [Total Writes] DESC, [Total Reads] ASC OPTION (RECOMPILE);';
        EXEC sp_executesql @sql, N'@DatabaseName NVARCHAR(128)', @DatabaseName;
    END

    -- Analyze bad non-clustered indexes

    -- Analyze missing indexes
    IF @MissingIndex = 1
    BEGIN
	    SELECT 'Missing Index Report' ReportName;
        SET @sql = N'SELECT ''' + @DatabaseName + ''' AS DBName, 
               migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * 
               (migs.user_seeks + migs.user_scans) AS improvement_measure, 
               ''CREATE INDEX [missing_index_'' + CONVERT(varchar, mig.index_group_handle) + ''_'' + CONVERT(varchar, mid.index_handle) + ''_'' + LEFT(PARSENAME(mid.statement, 1), 32) + '']''
               + '' ON '' + mid.statement 
               + '' ('' + ISNULL(mid.equality_columns, '''') 
               + CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN '','' ELSE '''' END 
               + ISNULL(mid.inequality_columns, '''') + '')'' 
               + ISNULL('' INCLUDE ('' + mid.included_columns + '')'', '''') AS create_index_statement, 
               migs.*, mid.database_id, mid.[object_id]
        FROM ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_missing_index_groups mig
        INNER JOIN ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_missing_index_group_stats migs ON migs.group_handle = mig.index_group_handle
        INNER JOIN ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_missing_index_details mid ON mig.index_handle = mid.index_handle
        WHERE migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) > 10
        AND mid.database_id = DB_ID(@DatabaseName)
        ORDER BY migs.avg_total_user_cost * migs.avg_user_impact * (migs.user_seeks + migs.user_scans) DESC;';
        EXEC sp_executesql @sql, N'@DatabaseName NVARCHAR(128)', @DatabaseName;
    END

    -- Analyze index fragmentation
    IF @IndexFragmentation = 1
    BEGIN
	    SELECT 'Index Fragmentation Report' ReportName;
        SET @sql = N'SELECT DB_NAME(ps.database_id) AS [Database Name], 
                            SCHEMA_NAME(o.[schema_id]) AS [Schema Name],
                            OBJECT_NAME(ps.OBJECT_ID) AS [Object Name], 
                            i.[name] AS [Index Name], 
                            ps.index_id, 
                            ps.index_type_desc, 
                            CAST(ps.avg_fragmentation_in_percent AS DECIMAL (15,3)) AS [Avg Fragmentation in Pct], 
                            ps.fragment_count, 
                            ps.page_count, 
                            i.fill_factor, 
                            i.has_filter, 
                            i.filter_definition, 
                            i.[allow_page_locks]
        FROM sys.dm_db_index_physical_stats(DB_ID(@DatabaseName), NULL, NULL, NULL , N''LIMITED'') AS ps
        INNER JOIN sys.indexes AS i WITH (NOLOCK) ON ps.[object_id] = i.[object_id] AND ps.index_id = i.index_id
        INNER JOIN sys.objects AS o WITH (NOLOCK) ON i.[object_id] = o.[object_id]
        WHERE ps.database_id = DB_ID(@DatabaseName)
        AND ps.page_count > @PageCount 
        ORDER BY ps.avg_fragmentation_in_percent DESC OPTION (RECOMPILE);';
        EXEC sp_executesql @sql, N'@DatabaseName NVARCHAR(128), @PageCount INT', @DatabaseName, @PageCount;
    END

    -- Analyze duplicate indexes
IF @findDuplicateIndex = 1
BEGIN
    SELECT 'Duplicate Index Report' AS ReportName;

    -- Temporary table to store duplicate index information
    CREATE TABLE #duplicateIndex (
        DBName         SYSNAME,
        TableName      SYSNAME,
        IndexName      NVARCHAR(256),
        ExactDuplicate NVARCHAR(256)
    );

    -- Dynamic SQL to analyze duplicate indexes
    SET @sql = N'
    USE ' + QUOTENAME(@DatabaseName) + ';
    WITH indexcols AS (
        SELECT i.object_id AS id, i.index_id AS indid, i.name,
            (
                SELECT CASE keyno WHEN 0 THEN NULL ELSE colid END AS [data()]
                FROM sys.sysindexkeys AS k
                WHERE k.id = i.object_id AND k.indid = i.index_id
                ORDER BY keyno, colid
                FOR XML PATH('''')
            ) AS cols,
            (
                SELECT CASE keyno WHEN 0 THEN colid ELSE NULL END AS [data()]
                FROM sys.sysindexkeys AS k
                WHERE k.id = i.object_id AND k.indid = i.index_id
                ORDER BY colid
                FOR XML PATH('''')
            ) AS inc
        FROM sys.indexes AS i
    ),
    index_sizes AS (
        SELECT
            i.object_id, i.index_id,
            SUM(a.used_pages) * 8 / 1024.0 AS IndexSizeMB
        FROM
            sys.indexes AS i
            JOIN sys.dm_db_partition_stats AS p ON i.object_id = p.object_id AND i.index_id = p.index_id
            JOIN sys.allocation_units AS a ON p.partition_id = a.container_id
        GROUP BY i.object_id, i.index_id
    )
    SELECT
        DB_NAME() AS DBName,
        OBJECT_SCHEMA_NAME(c1.id) + '' '' + OBJECT_NAME(c1.id) AS TableName,
        c1.name + '', Size:'' + CONVERT(VARCHAR(20), CAST(is1.IndexSizeMB AS DECIMAL(10,2))) + ''MB'' AS IndexName,
        c2.name + '', Size:'' + CONVERT(VARCHAR(20), CAST(is2.IndexSizeMB AS DECIMAL(10,2))) + ''MB'' AS ExactDuplicate
    FROM
        indexcols AS c1
        JOIN indexcols AS c2 ON c1.id = c2.id
                             AND c1.indid < c2.indid
                             AND c1.cols = c2.cols
                             AND c1.inc = c2.inc
        LEFT JOIN index_sizes AS is1 ON c1.id = is1.object_id AND c1.indid = is1.index_id
        LEFT JOIN index_sizes AS is2 ON c2.id = is2.object_id AND c2.indid = is2.index_id
    ';

    INSERT INTO #duplicateIndex
    EXEC sp_executesql @sql;

    SELECT *
    FROM #duplicateIndex;

    DROP TABLE #duplicateIndex;
END;

END;
GO

-- Example of executing the stored procedure
EXEC usp_IndexAnalysis
    @DatabaseName = 'TEST', 
    @BADIndex = 1, 
    @MissingIndex = 1, 
    @IndexFragmentation = 0, 
    @PageCount = 2500, 
    @findDuplicateIndex = 1;
