$scriptFolder = "C:\Users\Downloads\Cool Query\"

# Define the SQL Server instance and database
$sqlServer = "myservername"
$database = "master"

# Initialize counters for successful and errored scripts
$successCount = 0
$errorCount = 0

# Get all SQL script files from the folder and sort them by name
$sqlFiles = Get-ChildItem -Path $scriptFolder -Filter *.sql | Sort-Object Name

# Flag to determine whether to continue on error
$continueOnError = $true

# Loop through each SQL file and execute it
foreach ($file in $sqlFiles) {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] Executing script $($file.Name) on server $sqlServer"
    
    # Read the content of the SQL file
    $scriptContent = Get-Content -Path $file.FullName -Raw
    
    # Measure the execution time
    $startTime = Get-Date
    try {
        # Execute the SQL script and store the result
        $result = Invoke-Sqlcmd -ServerInstance $sqlServer -Database $database -Query $scriptContent
        $endTime = Get-Date
        $executionTime = $endTime - $startTime
        
        # Check if the result contains data
        if ($result) {
            # Dump the result into a CSV file named after the script
            $csvPath = Join-Path $scriptFolder ($file.BaseName + ".csv")
            $result | Export-Csv -Path $csvPath -NoTypeInformation
            Write-Host "[$timestamp] Script $($file.Name) executed successfully on server $sqlServer. Output saved to $($file.BaseName).csv"
            $successCount++ # Increment success count
        } else {
            Write-Host "[$timestamp] Script $($file.Name) executed successfully on server $sqlServer (No result returned)"
            $successCount++ # Increment success count
        }
        Write-Host "Execution Time: $executionTime"
    } catch {
        $endTime = Get-Date
        $executionTime = $endTime - $startTime
        Write-Host "[$timestamp] Script $($file.Name) execution failed on server $sqlServer"
        Write-Host "Error: $_"
        Write-Host "Execution Time: $executionTime"
        $errorCount++ # Increment error count
        
        # If continueOnError is set to false, stop execution
        if (!$continueOnError) {
            Write-Host "Stopping execution due to error."
            break
        }
    }
}

# Output the count of successful and errored scripts
Write-Host "Total scripts executed: $($successCount + $errorCount)"
Write-Host "Successful scripts: $successCount"
Write-Host "Errored scripts: $errorCount"
Write-Host "All scripts executed on server $sqlServer."
