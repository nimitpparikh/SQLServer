CREATE  OR ALTER PROCEDURE #usp_QueryStoreStatistics    
(      
    @SPOrQuery NVARCHAR(128) = '',  -- Specify a stored procedure name or ad hoc query to filter results      
    @TimeRange NVARCHAR(10) = '90Mi',  -- Specify the time range for the data (default is past 15 minutes)      
    @MaxResults INT = 50,  -- Specify the maximum number of results to return (default is 50)      
    @OrderBy NVARCHAR(50) = 'avg_duration',  -- Specify the column to order by (default is TotalDuration)      
    @StartTime DATETIME = NULL, -- Specify the start time for the custom time frame       
    @EndTime DATETIME = NULL ,  
	@QueryID INT = NULL,  
	@MinPlans INT = 1
)      
AS      
BEGIN 
IF @SPOrQuery IS NULL
SET @SPOrQuery = '%'
DECLARE @StartQueryID int
DECLARE @EndQueryID int
 IF @QueryID IS NULL
 begin
	 SET @StartQueryID = 0
	 SET @EndQueryID = 10000000
 end
 else 
 BEGIN
 	 SET @StartQueryID = @QueryID
	 SET @EndQueryID = @QueryID
 END
 IF @StartTime IS NULL      
    BEGIN      
        IF @TimeRange LIKE '%Mi'      
            SET @StartTime = DATEADD(MINUTE, -CAST(LEFT(@TimeRange, LEN(@TimeRange) - 2) AS INT), GETUTCDATE());      
        ELSE IF @TimeRange LIKE '%D'      
            SET @StartTime = DATEADD(DAY, -CAST(LEFT(@TimeRange, LEN(@TimeRange) - 1) AS INT), GETUTCDATE());      
        ELSE IF @TimeRange LIKE '%M'      
            SET @StartTime = DATEADD(MONTH, -CAST(LEFT(@TimeRange, LEN(@TimeRange) - 1) AS INT), GETUTCDATE());      
        ELSE      
            SET @StartTime = DATEADD(MINUTE, -15, GETUTCDATE()); -- Default to past 15 minutes      
  SET @EndTime = GETUTCDATE()    
    END      
    ELSE IF (@StartTime IS NOT NULL AND @EndTime IS NULL)      
    BEGIN      
        IF @TimeRange LIKE '%Mi'      
            SET @EndTime = DATEADD(MINUTE, CAST(LEFT(@TimeRange, LEN(@TimeRange) - 2) AS INT), @StartTime);      
        ELSE IF @TimeRange LIKE '%D'      
            SET @EndTime = DATEADD(DAY, CAST(LEFT(@TimeRange, LEN(@TimeRange) - 1) AS INT), @StartTime);      
        ELSE IF @TimeRange LIKE '%M'      
            SET @EndTime = DATEADD(MONTH, CAST(LEFT(@TimeRange, LEN(@TimeRange) - 1) AS INT), @StartTime);      
        ELSE      
            SET @EndTime = DATEADD(MINUTE, -15, GETUTCDATE()); -- Default to past 15 minutes      
    END       
 ;WITH CTE AS
 (
SELECT  top 100
            p.query_id query_id,    
            q.object_id object_id,    
            ISNULL(OBJECT_NAME(q.object_id), '') object_name,  
			--cast(query_plan as XML) QueryPlan,
			--p.plan_id,
            qt.query_sql_text query_sql_text,    
            -- Duration    
            ROUND(CONVERT(float, SUM(rs.avg_duration * rs.count_executions)) * 0.001, 2) total_duration,    
            ROUND(CONVERT(float, AVG(rs.avg_duration)) * 0.001, 2) avg_duration,    
            ROUND(CONVERT(float, MIN(rs.min_duration)) * 0.001, 2) min_duration,    
            ROUND(CONVERT(float, MAX(rs.max_duration)) * 0.001, 2) max_duration,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_duration * rs.stdev_duration * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 0.001, 2) stdev_duration,    
            -- CPU Time    
            ROUND(CONVERT(float, SUM(rs.avg_cpu_time * rs.count_executions)) * 0.001, 2) total_cpu_time,    
            ROUND(CONVERT(float, AVG(rs.avg_cpu_time)) * 0.001, 2) avg_cpu_time,    
            ROUND(CONVERT(float, MIN(rs.min_cpu_time)) * 0.001, 2) min_cpu_time,    
            ROUND(CONVERT(float, MAX(rs.max_cpu_time)) * 0.001, 2) max_cpu_time,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_cpu_time * rs.stdev_cpu_time * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 0.001, 2) stdev_cpu_time,    
            -- Logical Reads    
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_reads * rs.count_executions)) * 8, 2) total_logical_reads_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_logical_io_reads)) * 8, 2) avg_logical_reads_kb,    
            ROUND(CONVERT(float, MIN(rs.min_logical_io_reads)) * 8, 2) min_logical_reads_kb,    
            ROUND(CONVERT(float, MAX(rs.max_logical_io_reads)) * 8, 2) max_logical_reads_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_logical_io_reads * rs.stdev_logical_io_reads * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 8, 2) stdev_logical_reads_kb,    
            -- Logical Writes    
            ROUND(CONVERT(float, SUM(rs.avg_logical_io_writes * rs.count_executions)) * 8, 2) total_logical_writes_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_logical_io_writes)) * 8, 2) avg_logical_writes_kb,    
            ROUND(CONVERT(float, MIN(rs.min_logical_io_writes)) * 8, 2) min_logical_writes_kb,    
            ROUND(CONVERT(float, MAX(rs.max_logical_io_writes)) * 8, 2) max_logical_writes_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_logical_io_writes * rs.stdev_logical_io_writes * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 8, 2) stdev_logical_writes_kb,    
            -- Physical Reads (KB)    
            ROUND(CONVERT(float, SUM(rs.avg_physical_io_reads * rs.count_executions)) * 8, 2) total_physical_reads_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_physical_io_reads)) * 8, 2) avg_physical_reads_kb,    
            ROUND(CONVERT(float, MIN(rs.min_physical_io_reads)) * 8, 2) min_physical_reads_kb,    
            ROUND(CONVERT(float, MAX(rs.max_physical_io_reads)) * 8, 2) max_physical_reads_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_physical_io_reads * rs.stdev_physical_io_reads * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 8, 2) stdev_physical_reads_kb,    
            -- CLR Time (ms)    
            ROUND(CONVERT(float, SUM(rs.avg_clr_time * rs.count_executions)) * 0.001, 2) total_clr_time,    
            ROUND(CONVERT(float, AVG(rs.avg_clr_time)) * 0.001, 2) avg_clr_time,    
            ROUND(CONVERT(float, MIN(rs.min_clr_time)) * 0.001, 2) min_clr_time,    
            ROUND(CONVERT(float, MAX(rs.max_clr_time)) * 0.001, 2) max_clr_time,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_clr_time * rs.stdev_clr_time * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) * 0.001, 2) stdev_clr_time,    
            -- DOP    
            ROUND(CONVERT(float, SUM(rs.avg_dop * rs.count_executions)), 2) total_dop,    
            ROUND(CONVERT(float, AVG(rs.avg_dop)), 2) avg_dop,    
            ROUND(CONVERT(float, MIN(rs.min_dop)), 2) min_dop,    
            ROUND(CONVERT(float, MAX(rs.max_dop)), 2) max_dop,    
			ROUND(CONVERT(float, SQRT(SUM(rs.stdev_dop * rs.stdev_dop * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))), 2) stdev_dop,    
            -- Memory Consumption (KB)    
            ROUND(CONVERT(float, SUM(rs.avg_log_bytes_used * rs.count_executions)) / 1024, 2) total_memory_consumption_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_log_bytes_used)) / 1024, 2) avg_memory_consumption_kb,    
            ROUND(CONVERT(float, MIN(rs.min_log_bytes_used)) / 1024, 2) min_memory_consumption_kb,    
            ROUND(CONVERT(float, MAX(rs.max_log_bytes_used)) / 1024, 2) max_memory_consumption_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_log_bytes_used * rs.stdev_log_bytes_used * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) / 1024, 2) stdev_memory_consumption_kb,    
            -- Row Count    
            SUM(rs.avg_rowcount * rs.count_executions) total_row_count,    
            AVG(rs.avg_rowcount) avg_row_count,    
            MIN(rs.min_rowcount) min_row_count,    
            MAX(rs.max_rowcount) max_row_count,    
            SQRT(SUM(rs.stdev_rowcount * rs.stdev_rowcount * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0)) stdev_row_count,    
            -- Log Memory Used (KB)    
            ROUND(CONVERT(float, SUM(rs.avg_log_bytes_used * rs.count_executions)) / 1024, 2) total_log_memory_used_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_log_bytes_used)) / 1024, 2) avg_log_memory_used_kb,    
            ROUND(CONVERT(float, MIN(rs.min_log_bytes_used)) / 1024, 2) min_log_memory_used_kb,    
            ROUND(CONVERT(float, MAX(rs.max_log_bytes_used)) / 1024, 2) max_log_memory_used_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_log_bytes_used * rs.stdev_log_bytes_used * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) / 1024, 2) stdev_log_memory_used_kb,    
            -- Temp DB Memory Used (KB)    
            ROUND(CONVERT(float, SUM(rs.avg_tempdb_space_used * rs.count_executions)) / 1024, 2) total_temp_db_memory_used_kb,    
            ROUND(CONVERT(float, AVG(rs.avg_tempdb_space_used)) / 1024, 2) avg_temp_db_memory_used_kb,    
            ROUND(CONVERT(float, MIN(rs.min_tempdb_space_used)) / 1024, 2) min_temp_db_memory_used_kb,    
            ROUND(CONVERT(float, MAX(rs.max_tempdb_space_used)) / 1024, 2) max_temp_db_memory_used_kb,    
            ROUND(CONVERT(float, SQRT(SUM(rs.stdev_tempdb_space_used * rs.stdev_tempdb_space_used * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))) / 1024, 2) stdev_temp_db_memory_used_kb,    
            SUM(rs.count_executions) count_executions,    
            COUNT(DISTINCT p.plan_id) AS plan_count,    
            STRING_AGG(CAST(p.plan_id AS NVARCHAR(MAX)),',') WITHIN GROUP (ORDER BY p.plan_id) AS plan_ids    
    FROM sys.query_store_runtime_stats rs    
    JOIN sys.query_store_plan p ON p.plan_id = rs.plan_id    
    JOIN sys.query_store_query q ON q.query_id = p.query_id    
    JOIN sys.query_store_query_text qt ON q.query_text_id = qt.query_text_id    
	WHERE NOT (rs.first_execution_time > @ENDtime OR rs.last_execution_time < @starttime)  
	and p.query_id >= @StartQueryID AND p.query_id <= @EndQueryID 
	AND (OBJECT_NAME(q.object_id) like @SPOrQuery OR  qt.query_sql_text LIKE '%' + @SPOrQuery + '%')
    GROUP BY p.query_id, qt.query_sql_text, q.object_id   , query_plan, p.plan_id
	HAVING (count (distinct p.plan_id) >= @MinPlans))
	SELECT * FROM CTE 
	ORDER BY    
	CASE 
        WHEN @OrderBy = 'total_duration' THEN total_duration 
        WHEN @OrderBy = 'avg_duration' THEN avg_duration	  
        WHEN @OrderBy = 'min_duration' THEN min_duration	  
        WHEN @OrderBy = 'max_duration' THEN max_duration	  
        WHEN @OrderBy = 'stdev_duration' THEN stdev_duration 
        WHEN @OrderBy = 'total_cpu_time' THEN total_cpu_time 
        WHEN @OrderBy = 'avg_cpu_time' THEN avg_cpu_time	  
        WHEN @OrderBy = 'min_cpu_time' THEN min_cpu_time	  
        WHEN @OrderBy = 'max_cpu_time' THEN max_cpu_time	  
        WHEN @OrderBy = 'stdev_cpu_time' THEN stdev_cpu_time 
        WHEN @OrderBy = 'total_logical_reads_kb' THEN total_logical_reads_kb 
        WHEN @OrderBy = 'avg_logical_reads_kb' THEN avg_logical_reads_kb	  
        WHEN @OrderBy = 'min_logical_reads_kb' THEN min_logical_reads_kb	  
        WHEN @OrderBy = 'max_logical_reads_kb' THEN max_logical_reads_kb	  
        WHEN @OrderBy = 'stdev_logical_reads_kb' THEN stdev_logical_reads_kb 
        WHEN @OrderBy = 'total_logical_writes_kb' THEN total_logical_writes_kb	  
        WHEN @OrderBy = 'avg_logical_writes_kb' THEN avg_logical_writes_kb		  
        WHEN @OrderBy = 'min_logical_writes_kb' THEN min_logical_writes_kb		  
        WHEN @OrderBy = 'max_logical_writes_kb' THEN max_logical_writes_kb		  
        WHEN @OrderBy = 'stdev_logical_writes_kb' THEN stdev_logical_writes_kb	  
        WHEN @OrderBy = 'total_physical_reads_kb' THEN total_physical_reads_kb	  
        WHEN @OrderBy = 'avg_physical_reads_kb' THEN avg_physical_reads_kb		  
        WHEN @OrderBy = 'min_physical_reads_kb' THEN min_physical_reads_kb		  
        WHEN @OrderBy = 'max_physical_reads_kb' THEN max_physical_reads_kb		  
        WHEN @OrderBy = 'stdev_physical_reads_kb' THEN stdev_physical_reads_kb	  
        WHEN @OrderBy = 'total_clr_time' THEN total_clr_time					  
        WHEN @OrderBy = 'avg_clr_time' THEN avg_clr_time						  
        WHEN @OrderBy = 'min_clr_time' THEN min_clr_time						  
        WHEN @OrderBy = 'max_clr_time' THEN max_clr_time						  
        WHEN @OrderBy = 'stdev_clr_time' THEN stdev_clr_time					  
        WHEN @OrderBy = 'total_dop' THEN total_dop								  
        WHEN @OrderBy = 'avg_dop' THEN avg_dop									  
        WHEN @OrderBy = 'min_dop' THEN min_dop									  
        WHEN @OrderBy = 'max_dop' THEN max_dop									  
        WHEN @OrderBy = 'stdev_dop' THEN stdev_dop								  
        WHEN @OrderBy = 'total_memory_consumption_kb' THEN total_memory_consumption_kb 
        WHEN @OrderBy = 'avg_memory_consumption_kb' THEN avg_memory_consumption_kb		
        WHEN @OrderBy = 'min_memory_consumption_kb' THEN min_memory_consumption_kb		
        WHEN @OrderBy = 'max_memory_consumption_kb' THEN max_memory_consumption_kb		
        WHEN @OrderBy = 'stdev_memory_consumption_kb' THEN stdev_memory_consumption_kb	
        WHEN @OrderBy = 'total_row_count' THEN total_row_count							
        WHEN @OrderBy = 'avg_row_count' THEN avg_row_count								
        WHEN @OrderBy = 'min_row_count' THEN min_row_count								
        WHEN @OrderBy = 'max_row_count' THEN max_row_count								
        WHEN @OrderBy = 'stdev_row_count' THEN stdev_row_count							
        WHEN @OrderBy = 'total_log_memory_used_kb' THEN total_log_memory_used_kb		
        WHEN @OrderBy = 'avg_log_memory_used_kb' THEN avg_log_memory_used_kb			
        WHEN @OrderBy = 'min_log_memory_used_kb' THEN min_log_memory_used_kb			
        WHEN @OrderBy = 'max_log_memory_used_kb' THEN max_log_memory_used_kb			
        WHEN @OrderBy = 'stdev_log_memory_used_kb' THEN stdev_log_memory_used_kb		
        WHEN @OrderBy = 'total_temp_db_memory_used_kb' THEN total_temp_db_memory_used_kb	
        WHEN @OrderBy = 'avg_temp_db_memory_used_kb' THEN avg_temp_db_memory_used_kb		
        WHEN @OrderBy = 'min_temp_db_memory_used_kb' THEN min_temp_db_memory_used_kb		
        WHEN @OrderBy = 'max_temp_db_memory_used_kb' THEN max_temp_db_memory_used_kb		
        WHEN @OrderBy = 'stdev_temp_db_memory_used_kb' THEN stdev_temp_db_memory_used_kb	
        WHEN @OrderBy = 'count_executions' THEN count_executions
		ELSE total_duration
    END  desc


IF EXISTS (SELECT 1 FROM sys.procedures WHERE name like @SPOrQuery)
BEGIN
SELECT 
    p.name AS [SP Name], 
    qs.execution_count AS [Execution Count],
    ISNULL(qs.execution_count / DATEDIFF(Minute, qs.cached_time, GETDATE()), 0) AS [Calls/Minute],
    qs.total_elapsed_time / qs.execution_count AS [Avg Elapsed Time],
    qs.total_worker_time / qs.execution_count AS [Avg Worker Time],    
    qs.total_logical_reads / qs.execution_count AS [Avg Logical Reads],
    CONVERT(NVARCHAR(25), qs.last_execution_time, 20) AS [Last Execution Time],
    CONVERT(NVARCHAR(25), qs.cached_time, 20) AS [Plan Cached Time],
    qp.query_plan AS [Query Plan],
	ao.create_date,
	ao.modify_date
FROM 
    sys.procedures AS p WITH (NOLOCK)
    INNER JOIN sys.dm_exec_procedure_stats AS qs WITH (NOLOCK)
        ON p.[object_id] = qs.[object_id]
    CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) AS qp
	LEFT JOIN sys.all_objects ao ON p.object_id = ao.object_id
WHERE 
    qs.database_id = DB_ID()
    AND p.name = @SPOrQuery
END
END
GO
EXEC #usp_QueryStoreStatistics
