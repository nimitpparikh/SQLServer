USE tempdb
GO
CREATE OR ALTER PROCEDURE usp_readerrorlog
(
    @LookBackHours INT = 6, 
    @FilterError VARCHAR(1024) = NULL,
    @StartTime DATETIME = NULL,
    @EndTime DATETIME = NULL,
    @FilterLoginFailed BIT = 1,
	@AggregateData BIT = 1
)
AS
BEGIN
    -- Validate input parameters
    IF @LookBackHours <= 0
    BEGIN
        RAISERROR('LookBackHours must be greater than 0', 16, 1);
        RETURN;
    END

    IF @StartTime IS NOT NULL AND @EndTime IS NOT NULL AND @StartTime > @EndTime
    BEGIN
        RAISERROR('StartTime cannot be greater than EndTime', 16, 1);
        RETURN;
    END

    -- Drop temporary tables if they exist
    IF OBJECT_ID('tempdb..#ErrorLogFiles') IS NOT NULL
        DROP TABLE #ErrorLogFiles;

    CREATE TABLE #ErrorLogFiles
    (
        ArchiveNumber INT,
        LogDate DATETIME,
        LogFileSizeMB INT
    );

    IF OBJECT_ID('tempdb..#ErrorLog') IS NOT NULL
        DROP TABLE #ErrorLog;

    CREATE TABLE #ErrorLog
    (
        LogDate DATETIME,
        ProcessInfo NVARCHAR(50),
        LogText NVARCHAR(MAX)
    );

    -- Insert error log files
    INSERT INTO #ErrorLogFiles
    EXEC xp_enumerrorlogs;

    DECLARE @LogNumber INT;
    DECLARE @MaxLogNumber INT;

    -- Determine the range of log files to parse based on the provided time range
    IF @EndTime IS NOT NULL AND @StartTime IS NULL
    BEGIN
        SET @StartTime = DATEADD(HOUR, -@LookBackHours, @EndTime);
    END

    IF @StartTime IS NOT NULL AND @EndTime IS NOT NULL
    BEGIN
        SET @LogNumber = (
                            SELECT MIN(ArchiveNumber)
                            FROM #ErrorLogFiles
                            WHERE LogDate >= @StartTime
                         );

        SET @MaxLogNumber = (
                                SELECT MAX(ArchiveNumber)
                                FROM #ErrorLogFiles
                                WHERE LogDate <= @EndTime
                            );
    END
    ELSE
    BEGIN
        SET @LogNumber = 0;
        SET @MaxLogNumber = (
                                SELECT MAX(ArchiveNumber)
                                FROM #ErrorLogFiles
                                WHERE LogDate > DATEADD(HOUR, -@LookBackHours, GETDATE())
                            );

        IF @MaxLogNumber IS NULL
            SET @MaxLogNumber = 0
        ELSE
            SET @MaxLogNumber = @MaxLogNumber + 1;
    END

    -- Read error logs
    WHILE @LogNumber <= @MaxLogNumber
    BEGIN
        INSERT INTO #ErrorLog
        (
            LogDate,
            ProcessInfo,
            LogText
        )
        EXEC xp_readerrorlog @LogNumber, 1;

        SET @LogNumber = @LogNumber + 1;
    END;

    -- Delete irrelevant log entries, thanks Erik
    DELETE FROM #ErrorLog
    WHERE LogText LIKE '%found 0 errors and repaired 0 errors.%'
          OR LogText LIKE '%No user action is required.%'
          OR LogText LIKE '%command ''BACKUP DATABASE'', operation %'
          OR LogText LIKE 'Buffer Pool scan took %'
          OR LogText LIKE 'Parallel redo is shutdown for database %'
          OR LogText LIKE 'Starting up database %'
          OR LogText LIKE 'Parallel redo is started for database %.'
          OR LogText LIKE 'UTC adjustment:%'
          OR LogText LIKE ' '          
          OR LogText LIKE 'Creating%'      
		  OR LogText LIKE 'Dropping%'      
		  OR LogText LIKE 'Processing%'
		  OR LogText LIKE 'Deleting%'
		  OR LogText LIKE 'Executing%'
		  OR LogText LIKE 'Upgrading%'
		  OR LogText LIKE 'Updating%'
		  OR LogText LIKE 'Loaded%'
		  OR LogText LIKE 'Upload%'
		  OR LogText LIKE '----------------%'
          OR LogText LIKE 'System Manufacturer:%'
          OR LogText LIKE 'Server process ID is%'
          OR LogText LIKE 'Server is listening on%'
          OR LogText LIKE 'Audit: Server Audit:%'
          OR LogText LIKE 'Synchronize Database %with Resource Database.%'
		  OR LogText LIKE 'Setting database option%'
          OR LogText LIKE 'Microsoft SQL Server %Microsoft Corporation%Edition%'
          OR LogText LIKE 'Logging SQL Server messages in file%'          
          OR LogText IN ( 'All rights reserved.', '(c) Microsoft Corporation.', 'Authentication mode is MIXED.',
                          'The error log has been reinitialized. See the previous log for older entries.',
                          'Default collation: SQL_Latin1_General_CP1_CI_AS (us_english 1033)','Polybase feature disabled.'
                        );
    DELETE FROM #ErrorLog
    WHERE LogText NOT LIKE '%error%'
          AND LogText NOT LIKE '%corrupt%'
          AND LogText NOT LIKE '%insufficient%'
          AND LogText NOT LIKE '%DBCC CHECKDB%'
          AND LogText NOT LIKE '%Attempt to fetch logical page%'
          AND LogText NOT LIKE '%Total Log Writer threads%'
          AND LogText NOT LIKE '%Wait for redo catchup for the database%'
          AND LogText NOT LIKE '%Restart the server to resolve this problem%'
          AND LogText NOT LIKE '%running low%'
          AND LogText NOT LIKE '%unexpected%'
          AND LogText NOT LIKE '%fail%'
          AND LogText NOT LIKE '%contact%'
          AND LogText NOT LIKE '%incorrect%'
          AND LogText NOT LIKE '%allocate%'
          AND LogText NOT LIKE '%allocation%'
          AND LogText NOT LIKE '%Timeout occurred%'
          AND LogText NOT LIKE '%memory manager%'
          AND LogText NOT LIKE '%operating system%'
          AND LogText NOT LIKE '%cannot obtain a LOCK resource%'
          AND LogText NOT LIKE '%Server halted%'
          AND LogText NOT LIKE '%spawn%'
          AND LogText NOT LIKE '%BobMgr%'
          AND LogText NOT LIKE '%Sort is retrying the read%'
          AND LogText NOT LIKE '%service%'
          AND LogText NOT LIKE '%resumed%'
          AND LogText NOT LIKE '%repair the database%'
          AND LogText NOT LIKE '%buffer%'
          AND LogText NOT LIKE '%I/O Completion Port%'
          AND LogText NOT LIKE '%assert%'
          AND LogText NOT LIKE '%integrity%'
          AND LogText NOT LIKE '%latch%'
          AND LogText NOT LIKE '%SQL Server is exiting%'
          AND LogText NOT LIKE '%SQL Server is unable to run%'
          AND LogText NOT LIKE '%suspect%'
          AND LogText NOT LIKE '%restore the database%'
          AND LogText NOT LIKE '%checkpoint%'
          AND LogText NOT LIKE '%version store is full%'
          AND LogText NOT LIKE '%Setting database option%'
          AND LogText NOT LIKE '%Perform a restore if necessary%'
          AND LogText NOT LIKE '%Autogrow of file%'
          AND LogText NOT LIKE '%Bringing down database%'
          AND LogText NOT LIKE '%hot add%'
          AND LogText NOT LIKE '%Server shut down%'
          AND LogText NOT LIKE '%stack%'
          AND LogText NOT LIKE '%inconsistency.%'
          AND LogText NOT LIKE '%invalid%'
          AND LogText NOT LIKE '%time out occurred%'
          AND LogText NOT LIKE '%The transaction log for database%'
          AND LogText NOT LIKE '%The virtual log file sequence%'
          AND LogText NOT LIKE '%Cannot accept virtual log file sequence%'
          AND LogText NOT LIKE '%The transaction in database%'
          AND LogText NOT LIKE '%Shutting down%'
          AND LogText NOT LIKE '%thread pool%'
          AND LogText NOT LIKE '%debug%'
          AND LogText NOT LIKE '%resolving%'
          AND LogText NOT LIKE '%Cannot load the Query Store metadata%'
          AND LogText NOT LIKE '%Cannot acquire%'
          AND LogText NOT LIKE '%SQL Server evaluation period has expired%'
          AND LogText NOT LIKE '%terminat%'
          AND LogText NOT LIKE '%currently busy%'
          AND LogText NOT LIKE '%SQL Server has been configured for lightweight pooling%'
          AND LogText NOT LIKE '%IOCP%'
          AND LogText NOT LIKE '%Not enough memory for the configured number of locks%'
          AND LogText NOT LIKE '%The tempdb database data files are not configured with the same initial size and autogrowth settings%'
          AND LogText NOT LIKE '%The SQL Server image%'
          AND LogText NOT LIKE '%affinity%'
          AND LogText NOT LIKE '%SQL Server is starting%'
          AND LogText NOT LIKE '%Ignoring trace flag %'
          AND LogText NOT LIKE '%20 physical cores%'
          AND LogText NOT LIKE '%No free space%'
          AND LogText NOT LIKE '%Warning ******************%'
          AND LogText NOT LIKE '%SQL Server should be restarted%'
          AND LogText NOT LIKE '%Server name is%'
          AND LogText NOT LIKE '%Could not connect%'
          AND LogText NOT LIKE '%yielding%'
          AND LogText NOT LIKE '%worker thread%'
          AND LogText NOT LIKE '%A new connection was rejected%'
          AND LogText NOT LIKE '%A significant part of sql server process memory has been paged out%'
		  AND LogText NOT LIKE '%Dispatcher%'
          AND LogText NOT LIKE '%I/O requests taking longer than%'
          AND LogText NOT LIKE '%killed%'
          AND LogText NOT LIKE '%SQL Server could not start%'
          AND LogText NOT LIKE '%SQL Server cannot start%'
          AND LogText NOT LIKE '%System Manufacturer:%'
          AND LogText NOT LIKE '%columnstore%'
          AND LogText NOT LIKE '%timed out%'
          AND LogText NOT LIKE '%inconsistent%'
          AND LogText NOT LIKE '%flushcache%'
          AND LogText NOT LIKE '%Recovery for availability database%';

    -- Optionally filter login failed errors
    IF @FilterLoginFailed = 1
    BEGIN
        DELETE FROM #ErrorLog
        WHERE LogText LIKE 'Error: 18456, %'
        OR LogText LIKE 'Login failed for user%';
    END
	IF @AggregateData = 1
	BEGIN
    -- Select relevant log entries based on the provided time range
    IF @StartTime IS NULL AND @EndTime IS NULL
    BEGIN
        SELECT MAX(LogDate) LastTime, MIN(LogDate) FirstTime, LogText, COUNT(LogText) Total
        FROM #ErrorLog
        WHERE 
            LogDate > DATEADD(HOUR, -@LookBackHours, GETDATE())
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
		GROUP BY LogText
        ORDER BY 1 DESC;
    END
    ELSE IF @StartTime IS NULL AND @EndTime IS NOT NULL
    BEGIN
        SELECT MAX(LogDate) LastTime, MIN(LogDate) FirstTime, LogText, COUNT(LogText) Total
        FROM #ErrorLog
        WHERE 
            LogDate > DATEADD(HOUR, -@LookBackHours, @EndTime)
            AND LogDate <= @EndTime
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
		GROUP BY LogText
        ORDER BY 1 DESC;
    END
    ELSE IF @StartTime IS NOT NULL AND @EndTime IS NOT NULL
    BEGIN
        SELECT MAX(LogDate) LastTime, MIN(LogDate) FirstTime, LogText, COUNT(LogText) Total
        FROM #ErrorLog
        WHERE 
            LogDate >= @StartTime
            AND LogDate <= @EndTime
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
		GROUP BY LogText
        ORDER BY 1 DESC;
    END
	END
	ELSE 
	BEGIN
	    IF @StartTime IS NULL AND @EndTime IS NULL
    BEGIN
        SELECT *
        FROM #ErrorLog
        WHERE 
            LogDate > DATEADD(HOUR, -@LookBackHours, GETDATE())
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
        ORDER BY LogDate DESC;
    END
    ELSE IF @StartTime IS NULL AND @EndTime IS NOT NULL
    BEGIN
        SELECT *
        FROM #ErrorLog
        WHERE 
            LogDate > DATEADD(HOUR, -@LookBackHours, @EndTime)
            AND LogDate <= @EndTime
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
        ORDER BY LogDate DESC;
    END
    ELSE IF @StartTime IS NOT NULL AND @EndTime IS NOT NULL
    BEGIN
        SELECT *
        FROM #ErrorLog
        WHERE 
            LogDate >= @StartTime
            AND LogDate <= @EndTime
            AND (@FilterError IS NULL OR LogText LIKE '%' + @FilterError + '%')
        ORDER BY LogDate DESC;
    END
	END
    -- Drop temporary tables
    DROP TABLE #ErrorLog;
    DROP TABLE #ErrorLogFiles;
END;
GO
EXEC usp_readerrorlog
GO
DROP PROCEDURE usp_readerrorlog
